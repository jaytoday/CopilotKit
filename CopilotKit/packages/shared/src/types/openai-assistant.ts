export interface FunctionCall {
  /**
   * The arguments to call the function with, as generated by the model in JSON
   * format. Note that the model does not always generate valid JSON, and may
   * hallucinate parameters not defined by your function schema. Validate the
   * arguments in your code before calling your function.
   */
  arguments?: string;

  /**
   * The name of the function to call.
   */
  name?: string;
}

/**
 * Shared types between the API and UI packages.
 */
export interface Message {
  id: string;
  createdAt?: Date;
  content: string;
  ui?: string | null | undefined;
  role: "system" | "user" | "assistant" | "function";
  /**
   * If the message has a role of `function`, the `name` field is the name of the function.
   * Otherwise, the name field should not be set.
   */
  name?: string;
  /**
   * If the assistant role makes a function call, the `function_call` field
   * contains the function call name and arguments. Otherwise, the field should
   * not be set.
   */
  function_call?: string | FunctionCall;
}

export type AssistantMessage = {
  id: string;
  role: "assistant";
  content: Array<{
    type: "text";
    text: {
      value: string;
    };
  }>;
};

export type JSONValue =
  | null
  | string
  | number
  | boolean
  | { [x: string]: JSONValue }
  | Array<JSONValue>;
